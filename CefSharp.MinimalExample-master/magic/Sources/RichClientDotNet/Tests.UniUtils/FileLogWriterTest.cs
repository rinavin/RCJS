using com.magicsoftware.util.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.IO;

namespace Tests.UniUtils
{
    
    
    /// <summary>
    ///This is a test class for FileLogWriterTest and is intended
    ///to contain all FileLogWriterTest Unit Tests
    ///</summary>
   [TestClass()]
   public class FileLogWriterTest
   {
      private TestContext testContextInstance;

      /// <summary>
      ///Gets or sets the test context which provides
      ///information about and functionality for the current test run.
      ///</summary>
      public TestContext TestContext
      {
         get
         {
            return testContextInstance;
         }
         set
         {
            testContextInstance = value;
         }
      }

      #region Additional test attributes
      // 
      //You can use the following additional attributes as you write your tests:
      //
      //Use ClassInitialize to run code before running the first test in the class
      //[ClassInitialize()]
      //public static void MyClassInitialize(TestContext testContext)
      //{
      //}
      //
      //Use ClassCleanup to run code after all tests in a class have run
      //[ClassCleanup()]
      //public static void MyClassCleanup()
      //{
      //}
      //
      //Use TestInitialize to run code before running each test
      //[TestInitialize()]
      //public void MyTestInitialize()
      //{
      //}
      //
      //Use TestCleanup to run code after each test has run
      //[TestCleanup()]
      //public void MyTestCleanup()
      //{
      //}
      //
      #endregion


      /// <summary>
      ///A test for FileLogWriter Constructor
      ///</summary>
      [TestMethod()]
      public void FileLogWriterConstructorTest()
      {
         FileLogWriter target;
         ILogWriter fallbackWriter = new TestLogWriter();

         // Test empty/null file name -- [MH] This can't be tested because of the 'Debugger.IsAttached' condition in FileLogWriter.
         //target = new FileLogWriter("", LogSyncMode.Message, null);
         //accessor = new FileLogWriter_Accessor(new PrivateObject(target));
         //string autoGeneratedPath = accessor.logTarget;
         //Assert.IsFalse(!string.IsNullOrEmpty(autoGeneratedPath));
         //Assert.AreEqual(System.Environment.SpecialFolder.DesktopDirectory, Path.GetDirectoryName(autoGeneratedPath));

         string fileName = "TestFile.log";
         target = new FileLogWriter(fileName, LogSyncMode.Message, fallbackWriter);
         PrivateObject privateObj = new PrivateObject(target);
         Assert.AreEqual(privateObj.GetFieldOrProperty("fallbackWriter"), fallbackWriter);
         Assert.AreEqual(fileName, privateObj.GetFieldOrProperty("logTarget"));
         Assert.IsTrue((bool)privateObj.GetFieldOrProperty("closeAfterWrite"));
         Assert.IsFalse((bool)privateObj.GetFieldOrProperty("autoFlush"));

         target = new FileLogWriter(fileName, LogSyncMode.Flush, fallbackWriter);
         privateObj = new PrivateObject(target);
         Assert.AreEqual(fileName, privateObj.GetFieldOrProperty("logTarget"));
         Assert.IsFalse((bool)privateObj.GetFieldOrProperty("closeAfterWrite"));
         Assert.IsTrue((bool)privateObj.GetFieldOrProperty("autoFlush"));

         target = new FileLogWriter(fileName, LogSyncMode.Session, fallbackWriter);
         privateObj = new PrivateObject(target);
         Assert.AreEqual(fileName, privateObj.GetFieldOrProperty("logTarget"));
         Assert.IsFalse((bool)privateObj.GetFieldOrProperty("closeAfterWrite"));
         Assert.IsFalse((bool)privateObj.GetFieldOrProperty("autoFlush"));
      }

      /// <summary>
      ///A test for FallbackWrite
      ///</summary>
      [TestMethod()]
      [DeploymentItem("MgUtils.dll")]
      public void FallbackWriteTest()
      {
         FileLogWriter target;
         //FileLogWriter_Accessor accessor;
         TestLogWriter fallbackWriter = new TestLogWriter();

         target = new FileLogWriter(Path.Combine(TestContext.DeploymentDirectory, "testlog.txt") , LogSyncMode.Message, fallbackWriter);

         // Writing should be successful, fallback write should not be called.
         target.WriteLine("Hello");
         Assert.IsFalse(fallbackWriter.FlushWasInvoked);
         Assert.IsFalse(fallbackWriter.WriteLineWasInvoked);
         Assert.IsFalse(fallbackWriter.WriteWasInvoked);

         target = new FileLogWriter("c:\\this_dir_does_not_exist\\testlog.txt", LogSyncMode.Message, fallbackWriter);
         // First time printing will cause an exception and will print to the fallback writer.
         target.WriteLine("Hello");
         Assert.IsTrue(fallbackWriter.WriteWasInvoked);

         // At this point the fallback writer has an exception message from the Open operation.
         fallbackWriter.ResetInvocationIndicators();
         fallbackWriter.ClearOutput();

         target.WriteLine("Hello");
         string expected = "Hello" + "$n";
         string actual = fallbackWriter.Output.ToString().Replace(Environment.NewLine, "$n");
         Assert.AreEqual(expected, actual);

         fallbackWriter.ResetInvocationIndicators();
         fallbackWriter.ClearOutput();

         target.Write("Hello");
         expected = "Hello";
         actual = fallbackWriter.Output.ToString().Replace(Environment.NewLine, "$n");
         Assert.AreEqual(expected, actual);
      }

      
   }

}
